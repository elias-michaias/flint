// Test for distinct type syntax

// Define atom as a built-in type (should work)
// atom is built-in, no need to define

// Define person as a distinct subtype of atom
person :: distinct type of atom.

// Define human as a non-distinct subtype of atom
human :: type of atom.

// Define a predicate that takes atom
exists :: atom -> type.
triangle :: atom.

// Define a predicate that takes person
person_alive :: person -> type.
scout :: person.

// Define a predicate that takes human
human_alive :: human -> type.
johnny :: human.

persistent a1 :: human_alive(johnny).
persistent a2 :: person_alive(scout).

// Add fact that triangle exists
persistent a3 :: exists(triangle).

// Add fact that johnny exists - this makes the query succeed
persistent a4 :: exists(johnny).

// Test query - this should work since johnny is human and human is subtype of atom (non-distinct)
?- exists(johnny).

// Test query that should fail - scout is person, and person is distinct from atom
// ?- exists(scout).